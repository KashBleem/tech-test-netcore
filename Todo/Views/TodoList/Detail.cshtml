@using Todo.Controllers
@using Todo.Data.Entities
@using Todo.Services
@inject IGravatarService _gravatarService
@model Todo.Models.TodoLists.TodoListDetailViewmodel
@{
    ViewData["Title"] = $"List: {Model.Title}";
    var sortedItems = Model.Items.OrderBy(item => item.Rank).ToList();
}
<h2>@ViewData["Title"]</h2>
<div class="col-md-6">
    <div class="form-check mb-3">
        <input class="form-check-input" type="checkbox" id="hideCompleted">
        <label class="form-check-label" for="hideCompleted">
            Hide completed items
        </label>
    </div>
    <h2>CREATE NEW ITEM BELOW</h2>
    <form id="addItemForm" class="mb-3">
        <div class="form-group">
            <input type="text" class="form-control" id="newItemTitle" placeholder="New item title" required>
        </div>
        <div class="form-group">
            <select class="form-control" id="newItemImportance">
                <option value="0">High</option>
                <option value="1">Medium</option>
                <option value="2">Low</option>
            </select>
        </div>
        <div class="form-group">
            <label for="newItemRank"></label>
            <input type="number" class="form-control" id="newItemRank" placeholder="Rank" required min="1">
        </div>
        <button type="submit" class="btn btn-primary">Add Item</button>
    </form>
    <h2>CURRENT ITEMS</h2>
    <ul class="list-group" id="todoItems">
        @foreach (var item in sortedItems)
        {
            string contextualClass;
            switch (item.Importance)
            {
                case Importance.High:
                    contextualClass = "list-group-item-danger";
                    break;
                case Importance.Low:
                    contextualClass = "list-group-item-info";
                    break;
                default:
                    contextualClass = "";
                    break;
            }
            <li class="list-group-item @contextualClass" data-id="@item.TodoItemId" data-rank="@item.Rank" data-title="@item.Title" data-importance="@((int)item.Importance)">
                <div class="row">
                    <div class="col-md-5">
                        <a asp-action="Edit" asp-controller="TodoItem" asp-route-todoItemId="@item.TodoItemId">
                            @if (item.IsDone)
                            {
                                <s>@item.Title</s>
                            }
                            else
                            {
                                <text>@item.Title</text>
                            }
                        </a>
                    </div>
                    <div class="col-md-3">
                        <div class="input-group">
                            <input type="number" class="form-control rank-input" value="@item.Rank" min="1" data-item-id="@item.TodoItemId">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary set-rank-btn" type="button">Set Rank</button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 text-right">
                        @{
                            var gravatarprofile = await _gravatarService.GetProfileDetailsAsync(item.ResponsibleParty.Email);
                        }
                        @if (gravatarprofile != null)
                        {
                            <small>
                                @gravatarprofile.display_name <br />
                                <img src="https://www.gravatar.com/avatar/@Gravatar.GetHash(item.ResponsibleParty.Email)?s=30" />
                            </small>
                        }
                        else
                        {
                            <small>
                                @item.ResponsibleParty.UserName
                                <img src="https://www.gravatar.com/avatar/@Gravatar.GetHash(item.ResponsibleParty.Email)?s=30" />
                            </small>
                        }
                    </div>
                </div>
            </li>
        }
    </ul>
    <div class="form-group mb-3">
        <label for="sortOrder">Sort by:</label>
        <select class="form-control" id="sortOrder">
            <option value="importance">Importance</option>
            <option value="rank">Rank</option>
            <option value="title">Title</option>
        </select>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
    <script>
        (function () {
            const hideCompleted = document.getElementById('hideCompleted');
            const sortOrder = document.getElementById('sortOrder');
            const todoItemsList = document.getElementById('todoItems');
            const addItemForm = document.getElementById('addItemForm');
            let todoItems = Array.from(todoItemsList.querySelectorAll('.list-group-item'));

            function updateList() {
                todoItems.sort((a, b) => {
                    const sortBy = sortOrder.value;
                    const aValue = a.dataset[sortBy];
                    const bValue = b.dataset[sortBy];

                    if (sortBy === 'title') {
                        return aValue.localeCompare(bValue);
                    } else if (sortBy === 'rank') {
                        return parseInt(bValue) - parseInt(aValue);
                    } else if (sortBy === 'importance') {
                        return parseInt(aValue) - parseInt(bValue);
                    } else {
                        return parseInt(bValue) - parseInt(aValue);
                    }
                });

                todoItems.forEach(item => item.remove());
                todoItems.forEach(item => {
                    const titleElement = item.querySelector('a');
                    const isCompleted = titleElement && titleElement.querySelector('s');
                    if (!hideCompleted.checked || !isCompleted) {
                        todoItemsList.appendChild(item);
                    }
                });
            }

            hideCompleted.addEventListener('change', updateList);
            sortOrder.addEventListener('change', updateList);

            addItemForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const title = document.getElementById('newItemTitle').value;
                const importance = document.getElementById('newItemImportance').value;
                const rank = document.getElementById('newItemRank').value;

                const response = await fetch('/api/TodoItem/Create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        title: title,
                        importance: parseInt(importance),
                        rank: parseInt(rank),
                        todoListId: @Model.TodoListId
                            }),
                });

                if (response.ok) {
                    const newItem = await response.json();
                    const listItem = createListItem(newItem);
                    todoItemsList.insertBefore(listItem, todoItemsList.firstChild);
                    todoItems = Array.from(todoItemsList.querySelectorAll('.list-group-item'));
                    updateList();
                    addItemForm.reset();
                } else {
                    console.error('Failed to add item');
                }
            });

            function createListItem(item) {
                const li = document.createElement('li');
                li.className = `list-group-item ${getContextualClass(item.importance)}`;
                li.dataset.id = item.todoItemId;
                li.dataset.rank = item.rank;
                li.dataset.title = item.title;
                li.dataset.importance = item.importance;

                const content = `
                            <div class="row">
                                <div class="col-md-5">
                                    <a href="/TodoItem/Edit/${item.todoItemId}">
                                        ${item.title}
                                    </a>
                                </div>
                                <div class="col-md-3">
                                    <div class="input-group">
                                        <input type="number" class="form-control rank-input" value="${item.rank}" min="1" data-item-id="${item.todoItemId}">
                                        <div class="input-group-append">
                                            <button class="btn btn-outline-secondary set-rank-btn" type="button">Set Rank</button>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4 text-right">
                                    <small>
                                        ${item.responsibleParty.userName}
                                        <img src="https://www.gravatar.com/avatar/${item.responsibleParty.email}?s=30" />
                                    </small>
                                </div>
                            </div>
                        `;

                li.innerHTML = content;
                return li;
            }

            function getContextualClass(importance) {
                switch (parseInt(importance)) {
                    case 0: return 'list-group-item-danger';
                    case 2: return 'list-group-item-info';
                    default: return '';
                }
            }

            async function updateRanks(movedItem, newIndex) {
                const items = Array.from(todoItemsList.children);
                const movedItemId = parseInt(movedItem.dataset.id);
                const newRank = items.length - newIndex;

                try {
                    const response = await fetch('/api/TodoItem/SetRank', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            todoItemId: movedItemId,
                            newRank: newRank
                        }),
                    });

                    if (!response.ok) {
                        throw new Error('Failed to update rank');
                    }

                    items.forEach((item, index) => {
                        const rank = items.length - index;
                        item.dataset.rank = rank;
                        item.querySelector('.rank-input').value = rank;
                    });

                    if (sortOrder.value === 'rank') {
                        updateList();
                    }

                    todoItems = items;
                } catch (error) {
                    console.error('Error updating rank:', error);
                    updateList();
                }
            }

            // Add event listener for set rank buttons
            todoItemsList.addEventListener('click', async (e) => {
                if (e.target.classList.contains('set-rank-btn')) {
                    const listItem = e.target.closest('.list-group-item');
                    const itemId = listItem.dataset.id;
                    const rankInput = listItem.querySelector('.rank-input');
                    const newRank = rankInput.value;

                    try {
                        const response = await fetch('/api/TodoItem/SetRank', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                todoItemId: parseInt(itemId),
                                newRank: parseInt(newRank)
                            }),
                        });

                        if (!response.ok) {
                            throw new Error('Failed to update rank');
                        }

                        listItem.dataset.rank = newRank;
                        updateList();
                    } catch (error) {
                        console.error('Error updating rank:', error);
                        alert('Failed to update rank. Please try again.');
                    }
                }
            });

            updateList();
        })();
    </script>
}