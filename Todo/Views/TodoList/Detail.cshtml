@using Todo.Controllers
@using Todo.Data.Entities
@using Todo.Services
@inject IGravatarService _gravatarService
@model Todo.Models.TodoLists.TodoListDetailViewmodel
@{
    ViewData["Title"] = $"List: {Model.Title}";
    var sortedItems = Model.Items.OrderBy(item => item.Importance).ToList();
}
<h2>@ViewData["Title"]</h2>
<div class="col-md-6">
    <div class="form-check mb-3">
        <input class="form-check-input" type="checkbox" id="hideCompleted">
        <label class="form-check-label" for="hideCompleted">
            Hide completed items
        </label>
    </div>
    <div class="form-group mb-3">
        <label for="sortOrder">Sort by:</label>
        <select class="form-control" id="sortOrder">
            <option value="importance">Importance</option>
            <option value="rank">Rank</option>
            <option value="title">Title</option>
        </select>
    </div>
    <ul class="list-group" id="todoItems">
        <li class="list-group-item">
            <a asp-action="Create" asp-controller="TodoItem" asp-route-todoListId="@Model.TodoListId">
                <strong>Add New Item</strong>
            </a>
        </li>
        @foreach (var item in sortedItems)
        {
            string contextualClass;
            switch (item.Importance)
            {
                case Importance.High:
                    contextualClass = "list-group-item-danger";
                    break;
                case Importance.Low:
                    contextualClass = "list-group-item-info";
                    break;
                default:
                    contextualClass = "";
                    break;
            }
            <li class="list-group-item @contextualClass" data-rank="@item.Rank" data-title="@item.Title" data-importance="@((int)item.Importance)">
                <div class="row">
                    <div class="col-md-8">
                        <a asp-action="Edit" asp-controller="TodoItem" asp-route-todoItemId="@item.TodoItemId">
                            @if (item.IsDone)
                            {
                                <s>@item.Title</s>
                            }
                            else
                            {
                                <text>@item.Title</text>
                            }
                        </a>
                    </div>
                    @{
                        var gravatarprofile = await _gravatarService.GetProfileDetailsAsync(item.ResponsibleParty.Email);

                    }
                    @if(gravatarprofile!=null)
                    {
                    <div class="col-md-4 text-right">
                        <small>
                            @gravatarprofile.display_name <br />
                            <img src="https://www.gravatar.com/avatar/@Gravatar.GetHash(item.ResponsibleParty.Email)?s=30" />
                        </small>
                    </div>
                    }
                    else
                    {
                    <div class="col-md-4 text-right">
                        <small>
                            @item.ResponsibleParty.UserName
                            <img src="https://www.gravatar.com/avatar/@Gravatar.GetHash(item.ResponsibleParty.Email)?s=30" />
                        </small>
                    </div>
                    }

                </div>
            </li>
        }
    </ul>
</div>
@section Scripts {
    <script>
        (function () {
            const hideCompleted = document.getElementById('hideCompleted');
            const sortOrder = document.getElementById('sortOrder');
            const todoItemsList = document.getElementById('todoItems');
            const todoItems = Array.from(todoItemsList.querySelectorAll('.list-group-item:not(:first-child)'));

            function updateList() {
                todoItems.sort((a, b) => {
                    const sortBy = sortOrder.value;
                    const aValue = a.dataset[sortBy];
                    const bValue = b.dataset[sortBy];

                    if (sortBy === 'title') {
                        return aValue.localeCompare(bValue);
                    } else if (sortBy === 'rank') {
                        return parseInt(bValue) - parseInt(aValue);
                    } else {
                        return parseInt(aValue) - parseInt(bValue);
                    }
                });

                todoItems.forEach(item => item.remove());
                todoItems.forEach(item => {
                    const titleElement = item.querySelector('a');
                    const isCompleted = titleElement && titleElement.querySelector('s');
                    if (!hideCompleted.checked || !isCompleted) {
                        todoItemsList.appendChild(item);
                    }
                });
            }

            hideCompleted.addEventListener('change', updateList);
            sortOrder.addEventListener('change', updateList);

            updateList();
        })();
    </script>
}